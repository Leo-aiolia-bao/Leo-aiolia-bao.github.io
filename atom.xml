<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Leo-aiolia-bao.github.io</id>
    <title>leo-bao</title>
    <updated>2021-02-04T09:38:00.414Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Leo-aiolia-bao.github.io"/>
    <link rel="self" href="https://Leo-aiolia-bao.github.io/atom.xml"/>
    <subtitle>科学派 | Think twice, code once</subtitle>
    <logo>https://Leo-aiolia-bao.github.io/images/avatar.png</logo>
    <icon>https://Leo-aiolia-bao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, leo-bao</rights>
    <entry>
        <title type="html"><![CDATA[朴素的Dijkstra算法]]></title>
        <id>https://Leo-aiolia-bao.github.io/post/po-su-de-dijkstra-suan-fa/</id>
        <link href="https://Leo-aiolia-bao.github.io/post/po-su-de-dijkstra-suan-fa/">
        </link>
        <updated>2021-02-04T08:43:10.000Z</updated>
        <content type="html"><![CDATA[<pre><code>日期：2021年2月4日
时间：16点53分
😅🏀🏀🕔
</code></pre>
<p><strong>题目</strong></p>
<pre><code class="language-c">给定一个n个点m条边的有向图，图中可能存在重边和自环，所有边权均为正值。

请你求出1号点到n号点的最短距离，如果无法从1号点走到n号点，则输出-1。

输入格式
第一行包含整数n和m。

接下来m行每行包含三个整数x，y，z，表示存在一条从点x到点y的有向边，边长为z。

输出格式
输出一个整数，表示1号点到n号点的最短距离。

如果路径不存在，则输出-1。

数据范围
1≤n≤500,
1≤m≤105,
图中涉及边长均不超过10000。

输入样例：
3 3
1 2 2
2 3 1
1 3 4
输出样例：
3

</code></pre>
<p><strong>以下为完整代码</strong></p>
<pre><code class="language-c">#include&lt;iostream&gt;
#include&lt;algorithm&gt;
#include&lt;cstring&gt;
using namespace std;

const int N=510;

int g[N][N];    //为稠密阵所以用邻接矩阵存储
int dist[N];    //用于记录每一个点距离第一个点的距离
bool st[N];     //用于记录该点的最短距离是否已经确定

int n,m;

int Dijkstra()
{
    memset(dist, 0x3f,sizeof dist);     //初始化距离  0x3f代表无限大

    dist[1]=0;  //第一个点到自身的距离为0

    for(int i=0;i&lt;n;i++)      //有n个点所以要进行n次 迭代
    {
        int t=-1;       //t存储当前访问的点

        for(int j=1;j&lt;=n;j++)   //这里的j代表的是从1号点开始
            if(!st[j]&amp;&amp;(t==-1||dist[t]&gt;dist[j]))     
                t=j;

        st[t]=true;   

        for(int j=1;j&lt;=n;j++)           //依次更新每个点所到相邻的点路径值
            dist[j]=min(dist[j],dist[t]+g[t][j]);
    }

    if(dist[n]==0x3f3f3f3f) return -1;  //如果第n个点路径为无穷大即不存在最低路径
    return dist[n];
}
int main()
{
    cin&gt;&gt;n&gt;&gt;m;

    memset(g,0x3f,sizeof g);    //初始化图 因为是求最短路径
                                //所以每个点初始为无限大

    while(m--)
    {
        int x,y,z;
        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;
        g[x][y]=min(g[x][y],z);     //如果发生重边的情况则保留最短的一条边
    }

    cout&lt;&lt;Dijkstra()&lt;&lt;endl;
    return 0;
}


</code></pre>
<p>**思路笔记 **<br>
有之前宽搜和深搜的基础  就感觉思路特别清晰了</p>
<p>最近复习了下<code>Dijkstra</code> 发现之前的理解还是有些不太到位<br>
所以更新了一下 希望能帮助一起学算法的小伙伴理清思路</p>
<p><code>Dijkstra</code>  的整体思路比较清晰<br>
即进行<code>n（n为n的个数）</code>次迭代去确定每个点到起点的最小值 最后输出的终点的即为我们要找的最短路的距离</p>
<p>所以按照这个思路除了存储图外我们还需要存储两个量</p>
<p><code>dist[n]</code>//用于存储每个点到起点的最短距离<br>
<code>st[n]</code>  //用于在更新最短距离时 判断当前的点的最短距离是否确定 是否需要更新</p>
<p>每次迭代的过程中我们都先找到当前未确定的最短距离的点中距离最短的点<br>
（至于为什么是这样那么这就涉及到<code>Dijkstra算法</code>的具体数学证明了 有兴趣的同学可以百度一下）</p>
<pre><code class="language-c">int t=-1;       //将t设置为-1 因为Dijkstra算法适用于不存在负权边的图
for(int j=1;j&lt;=n;j++)
{
    if(!st[j]&amp;&amp;(t==-1||dist[t]&gt;dist[j])    //该步骤即寻找还未确定最短路的点中路径最短的点
        t=j;
}
</code></pre>
<p>通过上述操作当前我们的t代表就是剩余未确定最短路的点中 路径最短的点<br>
而与此同时该点的最短路径也已经确定我们将该点标记</p>
<p><code>st[t]=true;</code></p>
<p>然后用这个去更新其余未确定点的最短距离</p>
<p><code>for(int j=1;j&lt;=n;j++)</code><br>
<code>dist[j]=min(dist[j],dist[t]+g[t][j]);</code><br>
//这里可能有同学要问j如果从1开始的话 会不会影响之前已经确定的点的最小距离<br>
//但其实是不会 因为按照我们的Dijkstra算法的操作顺序 先确定最短距离的点的距离已经比后确定的要小 所以不会影响<br>
//当然你也可以在循环判断条件里加上<code>if(!st[i])</code><br>
//这里j从1开始只是为了代码的简洁</p>
<p>进行n次迭代后最后就可以确定每个点的最短距离<br>
然后再根据题意输出相应的 要求的最短距离</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[五分钟搭建自己的博客-github+gridea搭建博客和绑定域名]]></title>
        <id>https://Leo-aiolia-bao.github.io/post/wu-fen-zhong-da-jian-zi-ji-de-bo-ke/</id>
        <link href="https://Leo-aiolia-bao.github.io/post/wu-fen-zhong-da-jian-zi-ji-de-bo-ke/">
        </link>
        <updated>2021-02-04T08:27:00.000Z</updated>
        <content type="html"><![CDATA[<p>几个教程如下：按部就班操作即可</p>
<p><a href="https://www.luogu.com.cn/blog/ak-ioi/building-a-blog/">git 及 Gridea 教程</a></p>
<p><a href="https://gridea.dev/gridea-start/">Gridea官网教程</a></p>
<p><a href="%5BGridea%E5%AE%98%E7%BD%91%E6%95%99%E7%A8%8B%5D(https://gridea.dev/gridea-start/)">不错的csdn教程</a></p>
<p>我踩得坑： <strong>域名</strong>和<strong>仓库</strong>名字 不一致，导致折腾半天找不到自己的博客网站</p>
<p>如域名：https://getridea.github.io<br>
仓库：getgridea.github.io</p>
<p>这样即可 ，<br>
而下面不可</p>
<p>如域名：https://getridea.github.io<br>
仓库：myblog.github.io</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown语法]]></title>
        <id>https://Leo-aiolia-bao.github.io/post/markdown-yu-fa/</id>
        <link href="https://Leo-aiolia-bao.github.io/post/markdown-yu-fa/">
        </link>
        <updated>2021-02-04T04:12:11.000Z</updated>
        <content type="html"><![CDATA[<p>Markdown 的目标是实现「易读易写」，成为一种适用于网络的书写语言。因此洛谷使用 Markdown 发布内容。</p>
<p>请仔细阅读下列文档，如果没有按照要求正确使用格式，将可能无法发出讨论，或者被删除。</p>
<p>段落和换行<br>
一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行。普通的 Markdown 段落不可以用空格或制表符来缩进。</p>
<p>空行：一行之内只包含回车换行、空格、制表符。</p>
<p>标题<br>
Markdown 的标题是在行首插入 1 到 6 个 # ，#和标题文字之间使用一个或多个空格，对应到标题 1 到 6 级。</p>
<p>例如：</p>
<h1 id="这是-h1">这是 H1</h1>
<h2 id="这是-h2">这是 H2</h2>
<h3 id="这是-h3">这是 H3</h3>
<p>显示的效果如下：</p>
<p>#这是 H1<br>
##这是 H2<br>
###这是 H3<br>
不要全文使用标题，或者用标题强调特别多的文字。这会让读者觉得困扰。</p>
<p>强调<br>
Markdown 使用星号（*）和底线（<em>）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 <em> 标签包围（即斜体），用两个 * 或</em> 包起来的话，则会被转成 <strong>（即粗体）。</p>
<p>例如：</p>
<p><em>单引号斜体</em></p>
<p><em>单下划线斜体</em></p>
<p><strong>双引号加粗</strong></p>
<p><strong>双下划线加粗</strong></p>
<p><s>删除线</s><br>
显示的效果如下：</p>
<p>单引号斜体</p>
<p>单下划线斜体</p>
<p>双引号加粗</p>
<p>双下划线加粗</p>
<p>删除线</p>
<p>但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。如果要在文字前后直接插入普通的星号或底线，你可以用反斜线（\）（参见下面的“反斜杠”部分）。</p>
<p>例如：</p>
<p>*使用反斜线开头的*被当做是普通的字符*<br>
显示的效果如下：</p>
<p><em>使用反斜线开头的</em>被当做是普通的字符*</p>
<p>代码块<br>
如果要发送代码，但没有按照下面的方式进行格式化，将不能发送成功。</p>
<p>大段代码<br>
Markdown建立代码块的方法：将<code>置于这段代码的首行和末行，独立成一行。第一行的</code>后面可以加上语言名称，例如 cpp、java、c、pascal 等（不要写成 c++）。</p>
<p>例如：</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
</code></pre>
<p>显示成</p>
<p>#include<iostream><br>
小段代码<br>
需要引用代码时，如果引用的语句只有一段，不分行，可以用`将语句包起来。</p>
<p>注：如果你真的要打<code>这个字符的话，可以仿照和*这个字符一样的处理方式，在</code>前加一个反斜杠。</p>
<p>区块引用<br>
Markdown 标记区块引用的方法是在行的最前面加 &gt; ，也可以只在整个段落的第一行最前面加上 &gt;，区块引用内部可以嵌套，只要根据层次加上不同数量的 &gt;即可，引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等。</p>
<p>例如:</p>
<blockquote>
<p>Markdown 标记区块引用的方法是在行的最前面加&gt;</p>
<p>也可以只在整个段落的第一行最前面加上 &gt;</p>
<blockquote>
<p>区块引用内部可以嵌套，只要根据层次加上不同数量的 &gt;即可.</p>
<p><em>我是内部嵌套区块，我可以使用其他 Markdown 语法哦</em></p>
<h3 id="我是引用区块内使用标题3语法">我是引用区块内使用标题3语法</h3>
<pre><code class="language-java">     //在引用区块内可以加入代码块
     import java.net.URL;
     import java.util.Arrays;
     import java.util.Date;
     import java.util.Set;
</code></pre>
</blockquote>
</blockquote>
<p>显示的效果如下：</p>
<p>Markdown 标记区块引用的方法是在行的最前面加&gt;</p>
<p>也可以只在整个段落的第一行最前面加上 &gt;</p>
<p>区块引用内部可以嵌套，只要根据层次加上不同数量的 &gt;即可.</p>
<p>我是内部嵌套区块，我可以使用其他 Markdown 语法哦</p>
<p>我是引用区块内使用标题3语法<br>
//在引用区块内可以加入代码块<br>
import java.net.URL;<br>
import java.util.Arrays;<br>
import java.util.Date;<br>
import java.util.Set;<br>
列表<br>
Markdown 支持有序列表和无序列表，无序列表使用星号、加号或是减号作为列表标记，有序列表则使用数字接着一个英文句点。两种列表方式格式都是：列表标记+空格+列表项，即列表项目标记通常是放在最左边，也可以缩进最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>
<p>(1)无序列表<br>
星号、加号或是减号三种列表方式效果等同。</p>
<p>例如：</p>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue<br>
它们的显示效果均为：</li>
</ul>
<p>Red<br>
Green<br>
Blue<br>
(2)有序列表<br>
有序列表则使用数字接着一个英文句点。</p>
<p>例如：</p>
<ol>
<li>Red</li>
<li>Green</li>
<li>Blue<br>
显示效果为：</li>
</ol>
<p>Red<br>
Green<br>
Blue<br>
链接<br>
在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>
<p>这是 行内式链接标题 内联方式.</p>
<p><a href="http://www.luogu.org/">行内式链接标题</a><br>
图片<br>
Markdown 使用一种和链接很相似的语法来标记图片</p>
<p>行内式的图片语法如下：</p>
<figure data-type="image" tabindex="1"><img src="%E5%9B%BE%E7%89%87%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E6%88%96%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84" alt="图片下方文字" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="%E5%9B%BE%E7%89%87%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E6%88%96%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84" alt="图片下方文字" title="可选标题" loading="lazy"></figure>
<p>详细叙述如下：一个惊叹号!，接着一个方括号，里面放上图片的替代文字（这些文字将在图片加载失败的时候显示），接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 'title' 文字。</p>
<p>例如：</p>
<p><img src="https://cdn.class.luogu.com.cn/fe/logo-full.png?27925f707b34b1472e135b1a2dd848e5" alt="logo" loading="lazy"><br>
将会显示图片：</p>
<p>logo</p>
<p>自动链接<br>
Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>
<p><a href="https://www.luogu.com.cn/">https://www.luogu.com.cn/</a><br>
显示效果为：</p>
<p>https://www.luogu.com.cn/</p>
<p>分隔线<br>
可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他内容。也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<hr>
<hr>
<hr>
<hr>
<hr>
<p>显示的效果如下：</p>
<p>反斜杠<br>
Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用<em>标签），你可以在星号的前面加上反斜杠。</p>
<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号（加上反斜杠后，这些符号都会以原来的方式显示）：</p>
<p>\   反斜线<br>
`   反引号</p>
<ul>
<li>星号<br>
_   底线<br>
{}  花括号<br>
[]  方括号<br>
()  括弧</li>
</ul>
<h1 id="井字号">井字号</h1>
<ul>
<li>加号</li>
</ul>
<ul>
<li>减号<br>
.   英文句点<br>
!   惊叹号</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Leo-aiolia-bao.github.io/post/hello-gridea/</id>
        <link href="https://Leo-aiolia-bao.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>