<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Leo-aiolia-bao.github.io</id>
    <title>leo-bao</title>
    <updated>2021-04-24T07:53:55.124Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Leo-aiolia-bao.github.io"/>
    <link rel="self" href="https://Leo-aiolia-bao.github.io/atom.xml"/>
    <subtitle>科学派 | Think twice, code once</subtitle>
    <logo>https://Leo-aiolia-bao.github.io/images/avatar.png</logo>
    <icon>https://Leo-aiolia-bao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, leo-bao</rights>
    <entry>
        <title type="html"><![CDATA[C/C++重定向]]></title>
        <id>https://Leo-aiolia-bao.github.io/post/ccchong-ding-xiang/</id>
        <link href="https://Leo-aiolia-bao.github.io/post/ccchong-ding-xiang/">
        </link>
        <updated>2021-04-24T07:41:25.000Z</updated>
        <content type="html"><![CDATA[<p>C/C++重定向 标准输入输出 的库函数。</p>
<p>所谓重定向输出，就是可以把原本只是输出在控制台的字符，输出到你指定的路径文件中。(输入类似，就是从指定的文件中读取，而不是读取在控制台中的输入。)重定向函数可以在任何时候开启、关闭。</p>
<p>函数名：freopen</p>
<p>标准声明：FILE *freopen( const char *path, const char *mode, FILE *stream );</p>
<p>所在文件： &lt;stdio.h&gt;</p>
<p>参数说明：</p>
<p>path: 文件名，用于存储输入输出的自定义文件名。</p>
<p>mode: 文件打开的模式。和fopen中的模式（如r-只读, w-写）相同。</p>
<p>stream: 一个文件，通常使用标准流文件。</p>
<p>返回值：成功，则返回一个path所指定文件的指针；失败，返回NULL。</p>
<p>功能：实现重定向，把预定义的标准流文件定向到由path指定的文件中。标准流文件具体是指stdin、stdout和stderr。其中stdin是标准输入流，默认为键盘；stdout是标准输出流，默认为屏幕；stderr是标准错误流，一般把屏幕设为默认。</p>
<p>注意freopen()的地址格式！必须是双斜杠\ !!!!</p>
<pre><code class="language-c">
#include&lt;iostream&gt;
#include&lt;stdio.h&gt;
using namespace std;
//0x3f3f3f3f为无穷大常量（一个10^9数量级的数） 
#define INF 0x3f3f3f3f
void swap(int &amp;x,int &amp;y){ //交换数值
	x^=y;
	y^=x;
	x^=y;
}
int main()
{
	//注意freopen()的地址格式！必须是双斜杠\\ !!!! 
	freopen(&quot;D:\\CZHSoftware\\C语言\\Dev编程h\\freopen\\freopenTest.txt&quot;,&quot;w&quot;,stdout);
	freopen(&quot;D:\\CZHSoftware\\C语言\\Dev编程h\\freopen\\freopenTest1.txt&quot;,&quot;r&quot;,stdin);
	int a=0,b=0;
	cout&lt;&lt;&quot;hello world&quot;&lt;&lt;endl;
	cin&gt;&gt;a&gt;&gt;b;
	swap(a,b);
	cout&lt;&lt;&quot;a=&quot;&lt;&lt;a&lt;&lt;&quot;,b=&quot;&lt;&lt;b&lt;&lt;endl;
	cout&lt;&lt;&quot;a+b=&quot;&lt;&lt;a+b&lt;&lt;endl;
	fclose(stdin);
	fclose(stdout);
	return 0;
} 
</code></pre>
<p>freopen(&quot;D:\CZHSoftware\C语言\Dev编程h\freopen\freopenTest1.txt&quot;,&quot;r&quot;,stdin)的作用就是把标准输入流stdin重定向到D:\CZHSoftware\C语言\Dev编程h\freopen\freopenTest1.txt文件中，这样在用scanf或是用cin输入时便不会从标准输入流读取数据,而是从freopenTest1.txt文件中获取输入。只要把输入数据事先粘贴到freopenTest1.txt中即可。</p>
<p>类似的，freopen(&quot;D:\CZHSoftware\C语言\Dev编程h\freopen\freopenTest.txt&quot;,&quot;w&quot;,stdout)的作用就是把stdout重定向到D:\CZHSoftware\C语言\Dev编程h\freopen\freopenTest.txt文件中，这样输出结果就可以通过打开freopenTest.txt文件查看。</p>
<p></p>
<p>上面程序运行意思：</p>
<p>比如freopenTest1.txt中数据是2 3，</p>
<p>则freopenTest.txt中写入了</p>
<p>hello world<br>
a=3,b=2<br>
a+b=5</p>
<p>如题：</p>
<pre><code class="language-c++">
/*
	租用游艇问题
	DP求解
	2021年4月24日
	周六
	
*/
#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;cstdio&gt;

using namespace std;

const int N = 210;  // 题目要求上限n

int r[N][N];  // 出租站i 到出租站j之间的租金 r(i,j)

// 求最少 出租站i 到出租站j之间的租金
 
int getMinRent(int n)
{
	int dp[200]; // dp[i] 是从出租站1 到 出租站n的最少租金
	
	dp[1] = 0 ; // 初始化  起始位置
	
	dp[2] = r[1][2];  // 初始化  1站到2站
	
	for( int i = 3; i&lt;=n ;i++)
	{
		dp[i] = r[1][i]; // 初始化dp[i] 为第一站到i站的租金
		
		for( int j = 2 ; j &lt; i ; j ++)
		{
			dp[i] = min( dp[i], dp[j] + r[j][i]);
			//状态转移方程
		}
	}
	return dp[n];  // 返回 1 到 n 站的最短距离 即所求
	
}



int main()
{
	freopen(&quot;D:\\course\\Junior_seconde_term\\algorithm\\class1file\\homework\\0424\\input.txt&quot;,&quot;r&quot;, stdin);
	freopen(&quot;D:\\course\\Junior_seconde_term\\algorithm\\class1file\\homework\\0424\\output.txt&quot;,&quot;w&quot;, stdout);
	
	int n ; 
	
	cin &gt;&gt; n;  // n个站
	
	for(int i = 1; i &lt; n; i++)
	{
		for(int j = i + 1; j &lt;= n; j++)
		{
			// scanf(&quot;%d&quot;, &amp; r[i][j]);
			cin &gt;&gt; r[i][j] ;
		}
	}
	
	cout &lt;&lt; &quot;The least cost is :&quot; &lt;&lt; getMinRent(n) &lt;&lt; endl;
	
	return 0;
}

</code></pre>
<p></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[排列数字(字典序)]]></title>
        <id>https://Leo-aiolia-bao.github.io/post/pai-lie-shu-zi-zi-dian-xu/</id>
        <link href="https://Leo-aiolia-bao.github.io/post/pai-lie-shu-zi-zi-dian-xu/">
        </link>
        <updated>2021-04-07T12:30:23.000Z</updated>
        <content type="html"><![CDATA[<p><strong>题目描述：</strong></p>
<p>给定一个整数 n，将数字 1∼n 排成一排，将会有很多种排列方法。</p>
<p>现在，请你按照字典序将所有的排列方法输出。</p>
<p><strong>输入格式</strong><br>
共一行，包含一个整数 n。</p>
<p><strong>输出格式</strong><br>
按字典序输出所有排列方案，每个方案占一行。</p>
<p><strong>数据范围</strong><br>
1≤n≤7<br>
<strong>输入样例：</strong><br>
3<br>
<strong>输出样例</strong>：<br>
1 2 3<br>
1 3 2<br>
2 1 3<br>
2 3 1<br>
3 1 2<br>
3 2 1</p>
<p>dfs() :<br>
此题中dfs表示的含义是：求出从第u行到最后一行的所有path。<br>
dfs的求法：根据通项公式的含义，假设已知第u+1行到最后一行的所有path，综合1和2得出：path[u] 与 path[u+1] 合并后，即为dfs的解。</p>
<h4 id="代码">代码</h4>
<pre><code class="language-c">#include &lt;iostream&gt;
using namespace std;

const int N = 10;
int path[N];
bool st[N];
int n;



void dfs(int u)
{
    if(u == n )
   {        //存储从0
       for(int i = 0 ;i &lt; n; i++) cout &lt;&lt; path[i] &lt;&lt; ' ' ;
        cout &lt;&lt; endl; // puts(&quot;&quot;);
        return ;
   }
   
    //数字从1开始存储打印
    for(int i = 1; i&lt;= n; i++){
        if(!st[i])
        {
            path[u] = i;  // 存储当前 路径
            st[i] = true; // 标记
            dfs(u + 1);   // 下一次搜索
            st[i] = false;  // 恢复现场， 为了不影响下一次搜索
            
        }
        
    }
    
}

int main()
{
    cin &gt;&gt; n;
    
    dfs(0);
    
    
    return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[01背包问题（状态转移方程）]]></title>
        <id>https://Leo-aiolia-bao.github.io/post/01-bei-bao-wen-ti-zhuang-tai-zhuan-yi-fang-cheng/</id>
        <link href="https://Leo-aiolia-bao.github.io/post/01-bei-bao-wen-ti-zhuang-tai-zhuan-yi-fang-cheng/">
        </link>
        <updated>2021-02-10T03:43:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目：</h2>
<p>有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。</p>
<p>第 i 件物品的体积是 vi，价值是 wi。</p>
<p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>
输出最大价值。</p>
<p><strong>输入格式</strong><br>
第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。</p>
<p>接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。</p>
<p><strong>输出格式</strong><br>
输出一个整数，表示最大价值。</p>
<p><strong>数据范围</strong><br>
<code>0&lt;N,V≤1000</code><br>
<code>0&lt;vi,wi≤1000</code><br>
<strong>输入样例</strong><br>
<code>4 5</code><br>
<code>1 2</code><br>
<code>2 4</code><br>
<code>3 4</code><br>
<code>4 5</code><br>
<strong>输出样例：</strong><br>
<code>8</code></p>
<h2 id="题解">题解：</h2>
<p><strong>二维数组+动规</strong><br>
状态转移方程：<br>
定义<code>f[i][j]</code>:前 i 个物品，背包容量 j下的最优解</p>
<p>1）当前背包容量不够（<code>j &lt; w[i]</code>），为前 i−1 个物品最优解：<code>f[i][j] = f[i-1][j]</code><br>
2）当前背包容量够，判断选与不选第 i个物品<br>
选：<code>f[i][j] = f[i-1][j-w[i]] + v[i]</code><br>
不选：<code>f[i][j] = f[i-1][j]</code></p>
<p>C++ 代码</p>
<pre><code class="language-c">#include&lt;bits/stdc++.h&gt;

using namespace std;

const int MAXN = 1005;
int w[MAXN];    // 重量 
int v[MAXN];    // 价值 
int f[MAXN][MAXN];  // f[i][j], j重量下前i个物品的最大价值 

int main() 
{
    int n, m;   
    cin &gt;&gt; n &gt;&gt; m;
    for(int i = 1; i &lt;= n; ++i) 
        cin &gt;&gt; w[i] &gt;&gt; v[i];

    for(int i = 1; i &lt;= n; ++i) 
        for(int j = 1; j &lt;= m; ++j)
        { 
            //  当前重量装不进，价值等于前i-1个物品
            if(j &lt; w[i]) 
                f[i][j] = f[i-1][j];
            // 能装，需判断 
            else    
                f[i][j] = max(f[i-1][j], f[i-1][j-w[i]] + v[i]);
        }           

    cout &lt;&lt; f[n][m];
    return 0;
}
</code></pre>
<p>优化<br>
<strong>(动规+一维数组)</strong><br>
状态转移方程为：<code>f[j] = max(f[j], f[j-w[i]] + v[i]</code></p>
<p>C++ 代码</p>
<pre><code class="language-c">for(int i = 1; i &lt;= n; ++i)
{
    for(int j = m; j &gt;= 0; --j) 
        if(j &gt;= w[i])
            f[j] = max(f[j], f[j-w[i]] + v[i]);
} 
</code></pre>
<ul>
<li>注意枚举j必须从m开始</li>
</ul>
<pre><code class="language-c">//有优化版
/*
1. f[i] 仅用到了f[i-1]层, 
2. j与j-v[i] 均小于j
3.若用到上一层的状态时,从大到小枚举, 反之从小到大哦
*/
#include &lt;iostream&gt;

using namespace std;

const int N = 1010;

int n, m;
int v[N], w[N];
int f[N];

int main() {
    cin &gt;&gt; n &gt;&gt; m;
    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i] &gt;&gt; w[i];
    for(int i = 1; i &lt;= n; i++) 
        for(int j = m; j &gt;= v[i]; j--) 
            f[j] = max(f[j], f[j-v[i]]+w[i]);
    cout &lt;&lt; f[m] &lt;&lt; endl;
 return 0;    
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[染色法判定二分图]]></title>
        <id>https://Leo-aiolia-bao.github.io/post/ran-se-fa-pan-ding-er-fen-tu/</id>
        <link href="https://Leo-aiolia-bao.github.io/post/ran-se-fa-pan-ding-er-fen-tu/">
        </link>
        <updated>2021-02-07T06:27:52.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>奇数环：由奇数条边形成的一个环</p>
</li>
<li>
<p>二分图：当且仅当图中不含有奇数环，两个集合内部的内部没有边</p>
</li>
</ul>
<h3 id="算法1">算法1</h3>
<p>使用bfs</p>
<ul>
<li>约定染的颜色有1颜色和2颜色</li>
</ul>
<h4 id="时间复杂度-omn">时间复杂度 O(m+n)</h4>
<pre><code class="language-c">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;cstring&gt;

using namespace std;
const int N = 100010, M = 200010;
int n,m;
int h[N], e[M], ne[M], idx;
int color[N];

void add(int a, int b)
{
    e[idx] = b, ne[idx] = h[a], h[a] = idx ++;
}

bool dfs(int u, int c)
{
    color[u] = c;
    for(int i = h[u]; i != -1; i = ne[i])
    {
        int j = e[i];
        if(!color[j])
        {
            if(!dfs(j, 3-c)) return false;
        }
        else if(color[j] == c) return false;
    }
    return true;
}

int main()
{
    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
    memset(h, -1, sizeof h);
    
    while(m --)
    {
        int a, b;
        scanf(&quot;%d%d&quot;, &amp;a, &amp;b);
        add(a,b), add(b,a);
    }
    
    bool flag = true;
    for(int i = 1; i&lt;= n; i++)
    {
        if(!color[i])
        {
            if(! dfs(i,1))
            {
                flag = false;
                break;
            }
        }
    }
    
    if(flag) puts(&quot;Yes&quot;);
    else puts(&quot;No&quot;);
    
    return 0;
}
</code></pre>
<h1 id="导读什么是最大匹配">导读：什么是最大匹配？</h1>
<p>要了解匈牙利算法必须先理解下面的概念：</p>
<pre><code>匹配：在图论中，一个「匹配」是一个边的集合，其中任意两条边都没有公共顶点。

最大匹配：一个图所有匹配中，所含匹配边数最多的匹配，称为这个图的最大匹配。
</code></pre>
<p>下面是一些补充概念：</p>
<pre><code>完美匹配：如果一个图的某个匹配中，所有的顶点都是匹配点，那么它就是一个完美匹配。

交替路：从一个未匹配点出发，依次经过非匹配边、匹配边、非匹配边…形成的路径叫交替路。

增广路：从一个未匹配点出发，走交替路，如果途径另一个未匹配点（出发的点不算），则这条交替 路称为增广路（agumenting path）。
</code></pre>
<p>匈牙利算法<br>
不讲算法证明(我也不会)。</p>
<p>用一个转载的例子来讲解匈牙利算法的流程。</p>
<p>代码实现匈牙利算法<br>
首先是存图模板</p>
<pre><code class="language-c">//邻接表写法，存稀疏图
int h[N],ne[N],e[N],idx;
//n1,n2分别是两个点集的点的个数
int n1,n2,m;
void add(int a , int b)
{
    e[idx] = b, ne[idx] = h[a], h[a] = idx++;
}
void init()
{
    memset(h,-1,sizeof h);
}
//存边只存一边就行了，虽然是无向图。
for(int i = 0 ; i &lt; n1 ; i ++)
{
    int a,b;
    cin&gt;&gt;a&gt;&gt;b;
    add(a,b);
}
</code></pre>
<p>接下来看算法模板(c++)</p>
<pre><code class="language-c">//match[j]=a,表示女孩j的现有配对男友是a
int match[N];
//st[]数组我称为临时预定数组，st[j]=a表示一轮模拟匹配中，女孩j被男孩a预定了。
int st[N];

//这个函数的作用是用来判断,如果加入x来参与模拟配对,会不会使匹配数增多
int find(int x)
{
    //遍历自己喜欢的女孩
    for(int i = h[x] ; i != -1 ;i = ne[i])
    {
        int j = e[i];
        if(!st[j])//如果在这一轮模拟匹配中,这个女孩尚未被预定
        {
            st[j] = true;//那x就预定这个女孩了
            //如果女孩j没有男朋友，或者她原来的男朋友能够预定其它喜欢的女孩。配对成功,更新match
            if(!match[j]||find(match[j]))
            {
                match[j] = x;
                return true;
            }

        }
    }
    //自己中意的全部都被预定了。配对失败。
    return false;
}

//记录最大匹配
int res = 0;
for(int i = 1; i &lt;= n1 ;i ++)
{  
    //因为每次模拟匹配的预定情况都是不一样的所以每轮模拟都要初始化
    memset(st,false,sizeof st);
    if(find(i)) 
        res++;
}  

</code></pre>
<h4 id="下面用一个gif动图来演示这个整个配对的递归过程">下面用一个gif动图来演示这个整个配对的递归过程：</h4>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Floyd 算法]]></title>
        <id>https://Leo-aiolia-bao.github.io/post/floyd-suan-fa/</id>
        <link href="https://Leo-aiolia-bao.github.io/post/floyd-suan-fa/">
        </link>
        <updated>2021-02-06T13:20:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="多源汇最短路问题-具有多个源点">多源汇最短路问题-具有多个源点</h1>
<h3 id="floyd算法-on3-动态规划">Floyd算法 O(n^3)-动态规划</h3>
<p>给定一个n个点m条边的有向图，图中可能存在重边和自环，边权可能为负数。</p>
<p>再给定k个询问，每个询问包含两个整数x和y，表示查询从点x到点y的最短距离，如果路径不存在，则输出“impossible”。</p>
<p>数据保证图中不存在负权回路。</p>
<h4 id="输入格式">输入格式</h4>
<p>第一行包含三个整数n，m，k</p>
<p>接下来m行，每行包含三个整数x，y，z，表示点x和点y之间存在一条有向边，边长为z。</p>
<p>接下来k行，每行包含两个整数x，y，表示询问点x到点y的最短距离。</p>
<h4 id="输出格式">输出格式</h4>
<p>共k行，每行输出一个整数，表示询问的结果，若询问两点间不存在路径，则输出“impossible”。</p>
<h4 id="数据范围">数据范围</h4>
<p>1≤n≤2001≤n≤200<br>
1≤k≤n21≤k≤n2<br>
1≤m≤200001≤m≤20000<br>
图中涉及边长绝对值均不超过10000。</p>
<h4 id="输入样例">输入样例：</h4>
<p>3 3 2<br>
1 2 1<br>
2 3 2<br>
1 3 1<br>
2 1<br>
1 3</p>
<h4 id="输出样例">输出样例：</h4>
<p>impossible<br>
1</p>
<h4 id="代码">代码：</h4>
<pre><code class="language-c">#include &lt;iostream&gt;
using namespace std;

const int N = 210, M = 2e+10, INF = 1e9;

int n, m, k, x, y, z;
int d[N][N];

void floyd() {
    for(int k = 1; k &lt;= n; k++)
        for(int i = 1; i &lt;= n; i++)
            for(int j = 1; j &lt;= n; j++)
                d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
}

int main() {
    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;
    for(int i = 1; i &lt;= n; i++)
        for(int j = 1; j &lt;= n; j++)
            if(i == j) d[i][j] = 0;
            else d[i][j] = INF;
    while(m--) {
        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;
        d[x][y] = min(d[x][y], z);
        //注意保存最小的边
    }
    floyd();
    while(k--) {
        cin &gt;&gt; x &gt;&gt; y;
        if(d[x][y] &gt; INF/2) puts(&quot;impossible&quot;);
        //由于有负权边存在所以约大过INF/2也很合理
        else cout &lt;&lt; d[x][y] &lt;&lt; endl;
    }
    return 0;
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://Leo-aiolia-bao.github.io/post-images/1612618012689.png" alt="" loading="lazy"></figure>
<h2 id="文字性复习"><strong>文字性复习</strong></h2>
<h3 id="dijkstra-朴素on2"><strong>Dijkstra-朴素O(n^2)</strong></h3>
<ol>
<li>初始化距离数组, dist[1] = 0, dist[i] = inf;</li>
<li>for n次循环 每次循环确定一个min加入S集合中，n次之后就得出所有的最短距离</li>
<li>将不在S中dist_min的点-&gt;t</li>
<li>t-&gt;S加入最短路集合</li>
<li>用t更新到其他点的距离</li>
</ol>
<h3 id="dijkstra-堆优化omlogm"><strong>Dijkstra-堆优化O(mlogm)</strong></h3>
<p>利用邻接表，优先队列<br>
在priority_queue[HTML_REMOVED], greater[HTML_REMOVED] &gt; heap;中将返回堆顶<br>
利用堆顶来更新其他点，并加入堆中类似宽搜</p>
<h3 id="bellman_fordonm"><strong>Bellman_fordO(nm)</strong></h3>
<p>注意连锁想象需要备份, struct Edge{inta,b,c} Edge[M];<br>
初始化dist, 松弛dist[x.b] = min(dist[x.b], backup[x.a]+x.w);<br>
松弛k次，每次访问m条边</p>
<h3 id="spfa-on~onm"><strong>Spfa O(n)~O(nm)</strong></h3>
<p>利用队列优化仅加入修改过的地方<br>
for k次<br>
for 所有边利用宽搜模型去优化bellman_ford算法<br>
更新队列中当前点的所有出边</p>
<h3 id="floyd-on3"><strong>Floyd O(n^3)</strong></h3>
<p>初始化d<br>
k, i, j 去更新d</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[spfa算法]]></title>
        <id>https://Leo-aiolia-bao.github.io/post/spfa-suan-fa/</id>
        <link href="https://Leo-aiolia-bao.github.io/post/spfa-suan-fa/">
        </link>
        <updated>2021-02-05T10:01:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="算法分析">算法分析</h3>
<h4 id="1-什么是spfa算法">1、什么是spfa算法？</h4>
<pre><code class="language-c">SPFA 算法是 Bellman-Ford算法 的队列优化算法的别称，通常用于求含负权边的单源最短路径，以及判负权环。SPFA一般情况复杂度是O(m)O(m) 最坏情况下复杂度和朴素 Bellman-Ford 相同，为O(nm)O(nm)。

bellman-ford算法操作如下：
for n次
for 所有边 a,b,w (松弛操作)
dist[b] = min(dist[b],back[a] + w)

spfa算法对第二行中所有边进行松弛操作进行了优化，原因是在bellman—ford算法中，即使该点的最短距离尚未更新过，但还是需要用尚未更新过的值去更新其他点，由此可知，该操作是不必要的，我们只需要找到更新过的值去更新其他点即可。
</code></pre>
<h4 id="2-spfa算法步骤">2、spfa算法步骤</h4>
<pre><code class="language-c">queue &lt;– 1
while queue 不为空
 (1) t &lt;– 队头
 queue.pop()
 (2)用 t 更新所有出边 t –&gt; b，权值为w
 queue &lt;– b (若该点被更新过，则拿该点更新其他点)

时间复杂度 一般：O(m)O(m) 最坏：O(nm)O(nm)
n为点数，m为边数
</code></pre>
<h4 id="3-spfa也能解决权值为正的图的最短距离问题且一般情况下比dijkstra算法还好">3、spfa也能解决权值为正的图的最短距离问题，且一般情况下比Dijkstra算法还好</h4>
<h3 id="代码及注释">代码及注释</h3>
<pre><code class="language-c">
#include&lt;iostream&gt;
#include&lt;queue&gt;
#include&lt;cstring&gt;
using namespace std;

const int N=1e5+10;

#define fi first
#define se second

typedef pair&lt;int,int&gt; PII;//到源点的距离，下标号

int h[N],e[N],w[N],ne[N],idx=0;
int dist[N];//各点到源点的距离
bool st[N];
int n,m;
void add(int a,int b,int c){
    e[idx]=b;w[idx]=c;ne[idx]=h[a];h[a]=idx++;
}

int spfa(){
    queue&lt;PII&gt; q;
    memset(dist,0x3f,sizeof dist);
    dist[1]=0;
    q.push({0,1});
    st[1]=true;
    while(q.size()){
        PII p=q.front();
        q.pop();
        int t=p.se;
        st[t]=false;//从队列中取出来之后该节点st被标记为false,代表之后该节点如果发生更新可再次入队
        for(int i=h[t];i!=-1;i=ne[i]){
            int j=e[i];
            if(dist[j]&gt;dist[t]+w[i]){
                dist[j]=dist[t]+w[i];
                if(!st[j]){//当前已经加入队列的结点，无需再次加入队列，即便发生了更新也只用更新数值即可，重复添加降低效率
                    st[j]=true;
                    q.push({dist[j],j});
                }
            }
        }
    }
    if(dist[n]==0x3f3f3f3f) return -1;
    else return dist[n];
}

int main(){
    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
    memset(h,-1,sizeof h);
    while(m--){
        int a,b,c;
        scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);
        add(a,b,c);
    }
    int res=spfa();
    if(res==-1) puts(&quot;impossible&quot;);
    else printf(&quot;%d&quot;,res);

    return 0;
}

</code></pre>
<h3 id="算法分析2">算法分析2</h3>
<p>使用spfa算法解决是否存在负环问题</p>
<p>求负环的常用方法，基于<code>SPFA</code>，一般都用方法 2（该题也是用方法 2）：</p>
<ul>
<li>方法 1：统计每个点入队的次数，如果某个点入队n次，则说明存在负环</li>
<li>方法 2：统计当前每个点的最短路中所包含的边数，如果某点的最短路所包含的边数大于等于n，则也说明存在环</li>
</ul>
<p>cnt数组表示到达当前这个点最短路的边数，如果cnt[x]&gt;=n,说明至少经过了n条边，即n+1个点，由抽屉原理可知显然有两个点重复，即存在负环</p>
<p>_<strong>yls的原话</strong><br>
每次做一遍<code>spfa()</code>一定是正确的，但时间复杂度较高，可能会超时。初始时将所有点插入队列中可以按如下方式理解：<br>
在原图的基础上新建一个虚拟源点，从该点向其他所有点连一条权值为<code>0</code>的有向边。那么原图有负环等价于新图有负环。此时在新图上做<code>spfa</code>，将虚拟源点加入队列中。然后进行<code>spfa</code>的第一次迭代，这时会将所有点的距离更新并将所有点插入队列中。执行到这一步，就等价于视频中的做法了。那么视频中的做法可以找到负环，等价于这次<code>spfa</code>可以找到负环，等价于新图有负环，等价于原图有负环。得证。</p>
<ul>
<li>
<p>1、dist[x] 记录虚拟源点到x的最短距离</p>
</li>
<li>
<p>2、cnt[x] 记录当前x点到虚拟源点最短路的边数，初始每个点到虚拟源点的距离为0，只要他能再走n步，即cnt[x] &gt;= n，则表示该图中一定存在负环，由于从虚拟源点到x至少经过n条边时，则说明图中至少有n + 1个点，表示一定有点是重复使用</p>
</li>
<li>
<p>3、若dist[j] &gt; dist[t] + w[i],则表示从t点走到j点能够让权值变少，因此进行对该点j进行更新，并且对应cnt[j] = cnt[t] + 1,往前走一步</p>
</li>
</ul>
<h4 id="注意该题是判断是否存在负环并非判断是否存在从1开始的负环因此需要将所有的点都加入队列中更新周围的点">注意：该题是判断是否存在负环，并非判断是否存在从1开始的负环，因此需要将所有的点都加入队列中，更新周围的点</h4>
<pre><code class="language-c">#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;queue&gt;

using namespace std;
const int N = 100010;

int n,m;
int h[N], w[N], e[N], ne[N], idx;
int dist[N], cnt[N];  // cnt
bool st[N];

void add(int a, int b, int c)
{
    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++;
    
}

int spfa()
{
    // memset(dist, 0x3f, sizeof dist);
    // dist[1]= 0;
    
    queue &lt;int&gt; q;
    for(int i = 1 ; i&lt;=n; i++)
    {
        st[i] = true;
        q.push(i);
    }
    
    // q.push(1);
    // st[1] = true;
    
    while(q.size())
    {
        int t = q.front();
        q.pop();
        
        st[t] = false;
        //更新t的所有邻边
        for(int i = h[t]; i!=-1; i = ne[i])
        {
            int j = e[i];
            if(dist[j] &gt; dist[t] + w[i])
            {
                dist[j] = dist[t] + w[i]; 
                cnt[j] = cnt[t] + 1;  // 1
                
                if(cnt[j] &gt;= n) return true;  //2
                if(!st[j])
                {
                    q.push(j);
                    st[j] = true;
                }
            }
        }
    }
    return false;
}

int main()
{
    scanf(&quot;%d%d&quot;,&amp;n, &amp;m);
    
    memset(h, -1, sizeof h);
    
    while(m --)
    {
        int a, b, c;
        scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c);
        add(a, b, c);
    }
    
    if(spfa()) puts(&quot;Yes&quot;);
    else puts(&quot;No&quot;);
    
    
    
    return 0;
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[图论]]></title>
        <id>https://Leo-aiolia-bao.github.io/post/tu-lun/</id>
        <link href="https://Leo-aiolia-bao.github.io/post/tu-lun/">
        </link>
        <updated>2021-02-05T09:30:16.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://Leo-aiolia-bao.github.io/post-images/1612517738961.png" alt="" loading="lazy"></figure>
<p>正权图<br>
负权图<br>
都可用SPFA 算法 一般O(m), 最坏O(mn)<br>
比dijkstra 速度快<br>
可能会卡掉 很小可能，就是时间复杂度最坏时</p>
<p>算法： 思维 思路    写清笔记 证明<br>
代码熟练度</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[bellman_ford算法]]></title>
        <id>https://Leo-aiolia-bao.github.io/post/bellman_ford-suan-fa/</id>
        <link href="https://Leo-aiolia-bao.github.io/post/bellman_ford-suan-fa/">
        </link>
        <updated>2021-02-05T08:40:35.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="一-前导-算法分析">(一) 前导 算法分析</h3>
<p>1、问题：为什么Dijkstra不能使用在含负权的图中？（在强大的网友指点下已进行修改）</p>
<p>正确的分析<br>
Dijkstra算法的3个步骤</p>
<pre><code>1. 找到当前未标识的且离源点最近的点t
2. 对t号点点进行标识
3. 用t号点更新其他点的距离
</code></pre>
<p>反例</p>
<figure data-type="image" tabindex="1"><img src="https://Leo-aiolia-bao.github.io/post-images/1612514547588.png" alt="例子" loading="lazy"></figure>
]]></summary>
        <content type="html"><![CDATA[<h3 id="一-前导-算法分析">(一) 前导 算法分析</h3>
<p>1、问题：为什么Dijkstra不能使用在含负权的图中？（在强大的网友指点下已进行修改）</p>
<p>正确的分析<br>
Dijkstra算法的3个步骤</p>
<pre><code>1. 找到当前未标识的且离源点最近的点t
2. 对t号点点进行标识
3. 用t号点更新其他点的距离
</code></pre>
<p>反例</p>
<figure data-type="image" tabindex="1"><img src="https://Leo-aiolia-bao.github.io/post-images/1612514547588.png" alt="例子" loading="lazy"></figure>
<!-- more -->
<p><strong>结果：</strong></p>
<p>dijkstra算法在图中走出来的最短路径是<code>1 -&gt; 2 -&gt; 4 -&gt; 5</code>，算出 1 号点到 5 号点的最短距离是<code>2 + 2 + 1 = 5</code>，然而还存在一条路径是<code>1 -&gt; 3 -&gt; 4 -&gt; 5</code>，该路径的长度是<code>5 + (-2) + 1 = 4</code>，因此 <code>dijkstra</code> 算法失效<br>
(dijkstra不能解决负权边是因为 dijkstra要求每个点被确定后st[j] = true，dist[j]就是最短距离了，之后就不能再被更新了（一锤子买卖），而如果有负权边的话，那已经确定的点的dist[j]不一定是最短了)</p>
<h4 id="详解代码如下">详解代码如下：</h4>
<pre><code class="language-c">int dijkstra()
{
    memset(dist,0x3f,sizeof dist);
    dist[1]=0;

    for(int i=0;i&lt;n-1;i++)
    {
        cout&lt;&lt;&quot;第&quot;&lt;&lt;(i+1)&lt;&lt;&quot;次循环&quot;&lt;&lt;endl;
        int t=-1;
        cout&lt;&lt;&quot;还没开始找未被标记的数之前t的值为：&quot;&lt;&lt;t&lt;&lt;endl;
        int m=1;
        for(int j=1;j&lt;=n;j++)
        {    
            if(!st[j]&amp;&amp;(t==-1||dist[t]&gt;dist[j]))
            {
                cout&lt;&lt;&quot;循环内第&quot;&lt;&lt;m&lt;&lt;&quot;次找到符合条件的j是：&quot;&lt;&lt;j&lt;&lt;endl;
                m++;
                t=j;
            }
        }        
        cout&lt;&lt;&quot;被标记的数t的值为：&quot;&lt;&lt;t&lt;&lt;endl;

        st[t]=true;

        for(int j=1;j&lt;=n;j++)
            dist[j] = min(dist[j],dist[t]+g[t][j]);

        cout&lt;&lt;&quot;第&quot;&lt;&lt;(i+1)&lt;&lt;&quot;次循环后dist数组的更新情况：&quot;&lt;&lt;endl;
        for(int j=1;j&lt;=n;j++)
        {
            cout&lt;&lt;&quot;dist[&quot;&lt;&lt;j&lt;&lt;&quot;]距离为:&quot;&lt;&lt;dist[j]&lt;&lt;&quot;, &quot;;
        }
        puts(&quot;&quot;);
        puts(&quot;---------------------------------&quot;);
    }

    if(dist[n]==0x3f3f3f3f) return -1;
    else return dist[n];
}
输出：

第1次循环
还没开始找未被标记的数之前t的值为：-1
循环内第1次找到符合条件的j是：1
被标记的数t的值为：1
第1次循环后dist数组的更新情况：
dist[1]距离为:0, dist[2]距离为:2, dist[3]距离为:5, dist[4]距离为:1061109567, dist[5]距离为:1061109567, 
---------------------------------
第2次循环
还没开始找未被标记的数之前t的值为：-1
循环内第1次找到符合条件的j是：2
被标记的数t的值为：2
第2次循环后dist数组的更新情况：
dist[1]距离为:0, dist[2]距离为:2, dist[3]距离为:5, dist[4]距离为:4, dist[5]距离为:1061109567, 
---------------------------------
第3次循环
还没开始找未被标记的数之前t的值为：-1
循环内第1次找到符合条件的j是：3
循环内第2次找到符合条件的j是：4
被标记的数t的值为：4
第3次循环后dist数组的更新情况：
dist[1]距离为:0, dist[2]距离为:2, dist[3]距离为:5, dist[4]距离为:4, dist[5]距离为:5, 
---------------------------------
第4次循环
还没开始找未被标记的数之前t的值为：-1
循环内第1次找到符合条件的j是：3
被标记的数t的值为：3
第4次循环后dist数组的更新情况：
dist[1]距离为:0, dist[2]距离为:2, dist[3]距离为:5, dist[4]距离为:3, dist[5]距离为:5, 
---------------------------------
最短路径结果是：5

</code></pre>
<h3 id="二-什么是bellman-ford算法">(二) 什么是bellman - ford算法？</h3>
<p><code>Bellman - ford 算法是求含负权图的单源最短路径的一种算法，效率较低，代码难度较小。其原理为连续进行松弛，在每次松弛时把每条边都更新一下，若在 n-1 次松弛后还能更新，则说明图中有负环，因此无法得出结果，否则就完成。</code><br>
(通俗的来讲就是：假设 1 号点到 n 号点是可达的，每一个点同时向指向的方向出发，更新相邻的点的最短距离，通过循环 n-1 次操作，若图中不存在负环，则 1 号点一定会到达 n 号点，若图中存在负环，则在 n-1 次松弛后一定还会更新)</p>
<p>3、bellman - ford算法的具体步骤</p>
<pre><code class="language-c">for n次
for 所有边 a,b,w (松弛操作)
dist[b] = min(dist[b],back[a] + w)
</code></pre>
<p>注意：back[] 数组是上一次迭代后 dist[] 数组的备份，由于是每个点同时向外出发，因此需要对 dist[] 数组进行备份，若不进行备份会因此发生串联效应，影响到下一个点</p>
<p>4、在下面代码中，是否能到达n号点的判断中需要进行if(dist[n] &gt; INF/2)判断，而并非是if(dist[n] == INF)判断，原因是INF是一个确定的值，并非真正的无穷大，会随着其他数值而受到影响，dist[n]大于某个与INF相同数量级的数即可<br>
5、bellman - ford算法擅长解决有边数限制的最短路问题<br>
时间复杂度 O(nm)O(nm)<br>
其中n为点数，m为边数</p>
<pre><code class="language-c">#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;

const int N=510,M=10010;

struct Edge{
    int a;
    int b;
    int w;
}e[M];//把每个边保存下来即可
int dist[N];
int back[N];//备份数组放置串联
int n,m,k;//k代表最短路径最多包涵k条边

int bellman_ford(){
    memset(dist,0x3f,sizeof dist);
    dist[1]=0;
    for(int i=0;i&lt;k;i++){//k次循环
        memcpy(back,dist,sizeof dist);
        for(int j=0;j&lt;m;j++){//遍历所有边
            int a=e[j].a,b=e[j].b,w=e[j].w;
            dist[b]=min(dist[b],back[a]+w);//使用backup:避免给a更新后立马更新b,这样b一次性最短路径就多了两条边出来
        }

    }
    if(dist[n]&gt;0x3f3f3f3f/2) return -1;
    else return dist[n];

}

int main(){
    scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;k);
    for(int i=0;i&lt;m;i++){
        int a,b,w;
        scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;w);
        e[i]={a,b,w};
    }
    int res=bellman_ford();
    if(res==-1) puts(&quot;impossible&quot;);
    else cout&lt;&lt;res;


    return 0;
}
</code></pre>
<h2 id="需要注意的是"><strong>需要注意的是</strong></h2>
<ol>
<li>需要把dist数组进行一个备份，这样防止每次更新的时候出现串联；</li>
<li>由于存在负权边，因此return -1的条件就要改成dist[n]&gt;0x3f3f3f3f/2;</li>
<li>上面所谓的n次遍历的实际含义是当前的最短路径最多有n-1条边，这也就解释了为啥要i遍历到n的时候退出循环了，因为只有n个点,最短路径无环最多就存在n-1条边。</li>
<li>这里无需对重边和自环做单独的处理：<br>
<code>1] 重边：由于遍历了所有的边，总会遍历到较短的那一条; 2] 自环: 有自环就有自环啊，反正又不会死循环;</code></li>
<li>令人愉悦的是，该算法无非就是循环n次然后遍历所有的边，因此不需要做什么特别的存储，只要把所有的边的信息存下来能够遍历就行;<br>
6）bellman_ford算法可以存在负权回路，因为它求得的最短路是有限制的，是限制了边数的，这样不会永久的走下去，会得到一个解；<br>
7)SPFA算法各方面优于该算法，但是在碰到限制了最短路径上边的长度时就只能用bellman_ford了，此时直接把n重循环改成k次循环即可</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[朴素的Dijkstra算法]]></title>
        <id>https://Leo-aiolia-bao.github.io/post/po-su-de-dijkstra-suan-fa/</id>
        <link href="https://Leo-aiolia-bao.github.io/post/po-su-de-dijkstra-suan-fa/">
        </link>
        <updated>2021-02-04T08:43:10.000Z</updated>
        <content type="html"><![CDATA[<pre><code>日期：2021年2月4日
时间：16点53分
😅🏀🏀🕔
</code></pre>
<p><strong>题目</strong></p>
<pre><code class="language-c">给定一个n个点m条边的有向图，图中可能存在重边和自环，所有边权均为正值。

请你求出1号点到n号点的最短距离，如果无法从1号点走到n号点，则输出-1。

输入格式
第一行包含整数n和m。

接下来m行每行包含三个整数x，y，z，表示存在一条从点x到点y的有向边，边长为z。

输出格式
输出一个整数，表示1号点到n号点的最短距离。

如果路径不存在，则输出-1。

数据范围
1≤n≤500,
1≤m≤105,
图中涉及边长均不超过10000。

输入样例：
3 3
1 2 2
2 3 1
1 3 4
输出样例：
3

</code></pre>
<p><strong>以下为完整代码</strong></p>
<pre><code class="language-c">#include&lt;iostream&gt;
#include&lt;algorithm&gt;
#include&lt;cstring&gt;
using namespace std;

const int N=510;

int g[N][N];    //为稠密阵所以用邻接矩阵存储
int dist[N];    //用于记录每一个点距离第一个点的距离
bool st[N];     //用于记录该点的最短距离是否已经确定

int n,m;

int Dijkstra()
{
    memset(dist, 0x3f,sizeof dist);     //初始化距离  0x3f代表无限大

    dist[1]=0;  //第一个点到自身的距离为0

    for(int i=0;i&lt;n;i++)      //有n个点所以要进行n次 迭代
    {
        int t=-1;       //t存储当前访问的点

        for(int j=1;j&lt;=n;j++)   //这里的j代表的是从1号点开始
            if(!st[j]&amp;&amp;(t==-1||dist[t]&gt;dist[j]))     
                t=j;

        st[t]=true;   

        for(int j=1;j&lt;=n;j++)           //依次更新每个点所到相邻的点路径值
            dist[j]=min(dist[j],dist[t]+g[t][j]);
    }

    if(dist[n]==0x3f3f3f3f) return -1;  //如果第n个点路径为无穷大即不存在最低路径
    return dist[n];
}
int main()
{
    cin&gt;&gt;n&gt;&gt;m;

    memset(g,0x3f,sizeof g);    //初始化图 因为是求最短路径
                                //所以每个点初始为无限大

    while(m--)
    {
        int x,y,z;
        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;
        g[x][y]=min(g[x][y],z);     //如果发生重边的情况则保留最短的一条边
    }

    cout&lt;&lt;Dijkstra()&lt;&lt;endl;
    return 0;
}


</code></pre>
<p>**思路笔记 **<br>
有之前宽搜和深搜的基础  就感觉思路特别清晰了</p>
<p>最近复习了下<code>Dijkstra</code> 发现之前的理解还是有些不太到位<br>
所以更新了一下 希望能帮助一起学算法的小伙伴理清思路</p>
<p><code>Dijkstra</code>  的整体思路比较清晰<br>
即进行<code>n（n为n的个数）</code>次迭代去确定每个点到起点的最小值 最后输出的终点的即为我们要找的最短路的距离</p>
<p>所以按照这个思路除了存储图外我们还需要存储两个量</p>
<p><code>dist[n]</code>//用于存储每个点到起点的最短距离<br>
<code>st[n]</code>  //用于在更新最短距离时 判断当前的点的最短距离是否确定 是否需要更新</p>
<p>每次迭代的过程中我们都先找到当前未确定的最短距离的点中距离最短的点<br>
（至于为什么是这样那么这就涉及到<code>Dijkstra算法</code>的具体数学证明了 有兴趣的同学可以百度一下）</p>
<pre><code class="language-c">int t=-1;       //将t设置为-1 因为Dijkstra算法适用于不存在负权边的图
for(int j=1;j&lt;=n;j++)
{
    if(!st[j]&amp;&amp;(t==-1||dist[t]&gt;dist[j])    //该步骤即寻找还未确定最短路的点中路径最短的点
        t=j;
}
</code></pre>
<p>通过上述操作当前我们的t代表就是剩余未确定最短路的点中 路径最短的点<br>
而与此同时该点的最短路径也已经确定我们将该点标记</p>
<p><code>st[t]=true;</code></p>
<p>然后用这个去更新其余未确定点的最短距离</p>
<p><code>for(int j=1;j&lt;=n;j++)</code><br>
<code>dist[j]=min(dist[j],dist[t]+g[t][j]);</code><br>
//这里可能有同学要问j如果从1开始的话 会不会影响之前已经确定的点的最小距离<br>
//但其实是不会 因为按照我们的Dijkstra算法的操作顺序 先确定最短距离的点的距离已经比后确定的要小 所以不会影响<br>
//当然你也可以在循环判断条件里加上<code>if(!st[i])</code><br>
//这里j从1开始只是为了代码的简洁</p>
<p>进行n次迭代后最后就可以确定每个点的最短距离<br>
然后再根据题意输出相应的 要求的最短距离</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[五分钟搭建自己的博客-github+gridea搭建博客和绑定域名]]></title>
        <id>https://Leo-aiolia-bao.github.io/post/wu-fen-zhong-da-jian-zi-ji-de-bo-ke/</id>
        <link href="https://Leo-aiolia-bao.github.io/post/wu-fen-zhong-da-jian-zi-ji-de-bo-ke/">
        </link>
        <updated>2021-02-04T08:27:00.000Z</updated>
        <content type="html"><![CDATA[<p>几个教程如下：按部就班操作即可</p>
<p><a href="https://www.luogu.com.cn/blog/ak-ioi/building-a-blog/">git 及 Gridea 教程</a></p>
<p><a href="https://gridea.dev/gridea-start/">Gridea官网教程</a></p>
<p><a href="%5BGridea%E5%AE%98%E7%BD%91%E6%95%99%E7%A8%8B%5D(https://gridea.dev/gridea-start/)">不错的csdn教程</a></p>
<p>我踩得坑： <strong>域名</strong>和<strong>仓库</strong>名字 不一致，导致折腾半天找不到自己的博客网站</p>
<p>如域名：https://getridea.github.io<br>
仓库：getgridea.github.io</p>
<p>这样即可 ，<br>
而下面不可</p>
<p>如域名：https://getridea.github.io<br>
仓库：myblog.github.io</p>
]]></content>
    </entry>
</feed>